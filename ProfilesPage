import 'package:flutter/material.dart';

class ProfilesPage extends StatefulWidget {
  @override
  _ProfilesPageState createState() => _ProfilesPageState();
}

class _ProfilesPageState extends State<ProfilesPage> {
  // Controllers
  TextEditingController _searchController = TextEditingController();

  // Sample data for subjects and financial records
  final List<Map<String, String>> subjects = [
    {'subject': 'Mathematics', 'faculty': 'Faculty Name 1'},
    {'subject': 'Biology', 'faculty': 'Faculty Name 2'},
    {'subject': 'English', 'faculty': 'Faculty Name 3'},
    {'subject': 'History', 'faculty': 'Faculty Name 4'},
    {'subject': 'Physics', 'faculty': 'Faculty Name 5'},
  ];

  final List<Map<String, dynamic>> attendanceData = [
    {'subject': 'Mathematics', 'quarterly': 95, 'halfYearly': 90},
    {'subject': 'Biology', 'quarterly': 85, 'halfYearly': 80},
    {'subject': 'English', 'quarterly': 88, 'halfYearly': 86},
    {'subject': 'History', 'quarterly': 92, 'halfYearly': 89},
    {'subject': 'Physics', 'quarterly': 96, 'halfYearly': 94},
  ];

  final List<Map<String, dynamic>> financialData = [
    {'feeType': 'First Term Fee', 'amount': 'Rs 25,500', 'status': 'Paid'},
    {'feeType': 'Second Term Fee', 'amount': 'Rs 25,500', 'status': 'Unpaid'},
    {'feeType': 'Club Fee', 'amount': 'Rs 1,500', 'status': 'Paid'},
  ];

  // Notification count for the badge
  int _notificationCount = 5;

  // Dark Mode Toggle
  bool _isDarkMode = false;

  void _toggleDarkMode() {
    setState(() {
      _isDarkMode = !_isDarkMode;
    });
  }

  void _clearNotifications() {
    setState(() {
      _notificationCount = 0;
    });
  }

  void _sortSubjects(String criteria) {
    setState(() {
      if (criteria == 'Subject') {
        subjects.sort((a, b) => a['subject']!.compareTo(b['subject']!));
      } else if (criteria == 'Faculty') {
        subjects.sort((a, b) => a['faculty']!.compareTo(b['faculty']!));
      }
    });
  }

  List<Map<String, String>> get _filteredSubjects {
    if (_searchController.text.isEmpty) {
      return subjects;
    } else {
      return subjects.where((subject) {
        final searchTerm = _searchController.text.toLowerCase();
        final subjectName = subject['subject']!.toLowerCase();
        return subjectName.contains(searchTerm);
      }).toList();
    }
  }

  @override
  Widget build(BuildContext context) {
    final ThemeData theme = _isDarkMode ? ThemeData.dark() : ThemeData.light();

    return MaterialApp(
      theme: theme,
      home: Scaffold(
        appBar: AppBar(
          backgroundColor: _isDarkMode ? Colors.grey[900] : Colors.white,
          elevation: 0,
          leading: Padding(
            padding: const EdgeInsets.only(left: 8.0),
            child: CircleAvatar(
              backgroundImage: AssetImage('assets/logo.png'), // Replace with actual logo
            ),
          ),
          title: Text(
            'KRP',
            style: TextStyle(
              color: _isDarkMode ? Colors.white : Colors.black,
              fontWeight: FontWeight.bold,
            ),
          ),
          actions: [
            Stack(
              children: [
                IconButton(
                  icon: Icon(
                    Icons.notifications_none,
                    color: _isDarkMode ? Colors.white : Colors.black,
                  ),
                  onPressed: () {
                    _clearNotifications();
                  },
                ),
                if (_notificationCount > 0)
                  Positioned(
                    right: 11,
                    top: 11,
                    child: Container(
                      padding: EdgeInsets.all(2),
                      decoration: BoxDecoration(
                        color: Colors.red,
                        borderRadius: BorderRadius.circular(6),
                      ),
                      constraints: BoxConstraints(
                        minWidth: 14,
                        minHeight: 14,
                      ),
                      child: Text(
                        '$_notificationCount',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 10,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ),
              ],
            ),
            IconButton(
              icon: Icon(Icons.brightness_6),
              color: _isDarkMode ? Colors.white : Colors.black,
              onPressed: _toggleDarkMode,
            ),
            Padding(
              padding: const EdgeInsets.only(right: 12.0),
              child: GestureDetector(
                onTap: () {
                  // Handle user profile tap
                },
                child: CircleAvatar(
                  backgroundImage: AssetImage('assets/user_profile.png'), // User avatar image
                ),
              ),
            ),
          ],
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: ListView(
            children: [
              // Admission Number Heading
              Text(
                'Admission Number',
                style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 10),

              // Search Bar
              TextField(
                controller: _searchController,
                onChanged: (value) {
                  setState(() {}); // trigger UI rebuild on search
                },
                decoration: InputDecoration(
                  hintText: 'Search',
                  prefixIcon: Icon(Icons.search),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10.0),
                    borderSide: BorderSide.none,
                  ),
                  fillColor: Colors.grey[200],
                  filled: true,
                ),
              ),
              SizedBox(height: 20),

              // Sort Dropdown
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  DropdownButton<String>(
                    hint: Text("Sort by"),
                    items: <String>['Subject', 'Faculty'].map((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                    onChanged: (value) {
                      _sortSubjects(value!);
                    },
                  ),
                ],
              ),

              // Profile Picture and Details
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  CircleAvatar(
                    radius: 40,
                    backgroundImage: AssetImage('assets/student_profile.png'), // Student image
                  ),
                  SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('Student Name: John Doe'),
                        Text('Admission Number: 123456'),
                        Text('Date of Birth: 01/01/2000'),
                        Text('Std: 10th   Section: A'),
                        Text('Parent\'s Phone Number: +91 9876543210'),
                        Text('Blood Group: O+'),
                      ],
                    ),
                  ),
                ],
              ),
              SizedBox(height: 20),

              // Attendance Report
              Text(
                'Attendance Report',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 10),

              // Attendance Table
              Table(
                border: TableBorder.all(color: Colors.grey),
                children: [
                  TableRow(children: [
                    Text('Subject', style: TextStyle(fontWeight: FontWeight.bold)),
                    Text('Quarterly Exam', style: TextStyle(fontWeight: FontWeight.bold)),
                    Text('Half Yearly Exam', style: TextStyle(fontWeight: FontWeight.bold)),
                  ]),
                  ...attendanceData.map((data) {
                    return TableRow(children: [
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(data['subject']),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(data['quarterly'].toString()),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(data['halfYearly'].toString()),
                      ),
                    ]);
                  }).toList(),
                ],
              ),
              SizedBox(height: 20),

              // Financial Record
              Text(
                'Financial Record',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 10),

              // Financial Table
              Table(
                border: TableBorder.all(color: Colors.grey),
                children: [
                  TableRow(children: [
                    Text('Fee Type', style: TextStyle(fontWeight: FontWeight.bold)),
                    Text('Amount', style: TextStyle(fontWeight: FontWeight.bold)),
                    Text('Status', style: TextStyle(fontWeight: FontWeight.bold)),
                  ]),
                  ...financialData.map((data) {
                    return TableRow(children: [
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(data['feeType']),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(data['amount']),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          data['status'],
                          style: TextStyle(
                            color: data['status'] == 'Paid' ? Colors.green : Colors.red,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ]);
                  }).toList(),
                ],
              ),
              SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }
}
